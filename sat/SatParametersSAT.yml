openapi: 3.0.3
info:
  title: ParametersSAT
  description: API utilizada para gerar arquivos de exemplo atraves do VSCode
  version: 0.0.1
servers:
  - url: https://api.server.test/v1
paths:
  /api/sat/parameters-sat:
    post:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: params-sat
                description: 'Schema of SAT Parameters file '
                required:
                  - env
                  - version
                  - appID
                  - satSN
                  - services
                  - holderData
                  - certs
                  - syncTime
                properties:
                  env:
                    $ref: '#/components/schemas/environment'
                  version:
                    $ref: '#/components/schemas/version'
                  appID:
                    $ref: '#/components/schemas/identitySat'
                  satSN:
                    $ref: '#/components/schemas/serialNumber'
                  services:
                    $ref: '#/components/schemas/services'
                  holders:
                    type: array
                    items:
                      $ref: '#/components/schemas/holders'
                  transmissions:
                    $ref: '#/components/schemas/transmissions'
                  certs:
                    type: array
                    items:
                      $ref: '#/components/schemas/certsX509'
                  syncTime:
                    $ref: '#/components/schemas/syncTime'
components:
  schemas:
    environment:
      type: string
      title: env
      description: |
        Defines the execution environment:
         - `test`: Development testing environment.
         - `stage`: Pre-production testing environment.
         - `prod`: Production environment.
      enum:
        - test
        - stage
        - prod
      example: test
    version:
      type: string
      title: version
      description: 'Schema of Version of Parameters File, using a major.minor.patch versioning scheme (Ex.: 2.1.3)'
      pattern: ^\d+\.\d+\.\d+$
      example: 2.0.0
    identitySat:
      type: string
      title: SatID
      description: Schema of SAT ID
      minLength: 1
      maxLength: 64
      pattern: ^SAT\d{21}$
      example: SAT12345678900001823
    serialNumber:
      type: string
      title: SAT Serial Number
      format: uuid
      description: Schema of SAT Serial Number, use the format UUIDv4
      minLength: 32
      maxLength: 36
      pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
      example: FA59BA20-E176-4597-B211-6F5DE7109D7A
    services:
      type: object
      title: services
      required:
        - endpoints
      properties:
        endpoints:
          type: array
          items:
            type: string
          example:
            - 192.168.10.100:443
        SatBeat:
          type: string
          example: api/sat/beat
        SatStart:
          type: string
          example: api/sat/start
        SatTokenAccess:
          type: string
          example: api/sat/token-access
        SatTokenRevoke:
          type: string
          example: api/sat/token-revoke
        SatCertification:
          type: string
          example: api/sat/certification
        SatHolder:
          type: string
          example: api/sat/holder
        ParametersSAT:
          type: string
          example: api/sat/parametersSAT
        ParametersAPP:
          type: string
          example: api/sat/parametersAPP
        Management:
          type: string
          example: api/sat/management
    IdentitySat:
      type: string
      title: SatID
      description: Schema of SAT ID
      minLength: 1
      maxLength: 64
      pattern: ^SAT\d{21}$
      example: SAT12345678900001823
    Name:
      type: string
      title: Name
      description: Schema of name
      minLength: 1
      maxLength: 255
      example: Stack holder Teste
    Email:
      type: string
      title: email
      description: email address
      minLength: 1
      maxLength: 255
      format: email
      pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
      example: acme@acme.com
    Phone:
      type: string
      title: phone
      description: Schema of phone
      minLength: 1
      maxLength: 64
      pattern: ^\+(\d{1,3})\s?\(?\d{1,3}\)?\s?\d{4,5}[-\s]?\d{4}$
      example: +55 (11) 91234-1234
    append:
      type: object
      title: append
      description: Schema for Custom Attribute Data
      required:
        - key
        - value
      properties:
        key:
          type: string
          description: The key of the custom attribute.
          minLength: 1
          maxLength: 64
          example: CNPJ
        value:
          type: object
          description: The value of the custom attribute.
          example: '12345678900001'
    Address:
      type: object
      title: Address
      description: Schema of Address
      required:
        - street
        - city
        - stateProvince
        - postalCode
        - country
      properties:
        street:
          type: string
          description: Street of Address.
          example: Avenida Brasil, 1234 - CJ. 123
        city:
          type: string
          description: city of Address
          example: SAO PAULO
        stateProvince:
          type: string
          description: stateProvince of Address
          example: SAO PAULO
        postalCode:
          type: string
          description: postalCode of Address
          pattern: ^\d{5}-?\d{3}$
          example: 07013-678
        country:
          type: string
          description: country of Address, ISO 3166-1 & ISO 3166/MA (alpha-3)
          minLength: 3
          maxLength: 3
          example: BRA
    holders:
      type: object
      title: holders
      description: Schema of HolderContact
      required:
        - holderID
        - holderType
        - name
        - email
        - phone
        - address
        - organization
      properties:
        holderID:
          description: Stackholder ID registry in SAT 2.0.
          $ref: '#/components/schemas/IdentitySat'
        holderType:
          type: string
          title: holderType
          description: Schema of holderType
          minLength: 1
          maxLength: 8
          example: adm
        name:
          description: Name of Stackholder.
          $ref: '#/components/schemas/Name'
        email:
          description: Email of Stackholder Contact.
          $ref: '#/components/schemas/Email'
        phone:
          description: Phone of Stackholder Contact.
          $ref: '#/components/schemas/Phone'
        append:
          type: array
          description: Custom attribute append.
          items:
            $ref: '#/components/schemas/append'
        address:
          description: Address of Stackholder.
          $ref: '#/components/schemas/Address'
    transmissions:
      type: object
      title: transmissions
      description: Schema of transmissions
      required:
        - retries
        - timeout
      properties:
        retries:
          description: Number of retries of transmissions.
          type: integer
          example: 5
        expBackoff:
          type: array
          description: list of Exponential Backoff
          title: expBackoff
          items:
            type: integer
            example: 2
        timeout:
          type: integer
          description: Number of timeout of connection, in seconds
          example: 5
    certsX509:
      type: object
      title: certs
      description: JSON Web Key (JWK) as defined in RFC 7517 (https://datatracker.ietf.org/doc/html/rfc7517)
      required:
        - use
        - kty
        - x5c
      properties:
        key_ops:
          type: array
          description: 'Intended use of the key (e.g., signature or encryption). See RFC 7517 #section-4.3'
          enum:
            - sign
            - verify
            - encrypt
            - decrypt
            - wrapKey
            - unwrapKey
            - deriveKey
            - deriveBits
          example:
            - sign
            - encrypt
        kty:
          type: string
          description: 'Cryptographic key type. See RFC 7517 #section-4.1'
          example: EC
        crv:
          type: string
          description: 'EC key specific curve. See RFC 7517 #section-4.2'
          example: P-256
        x5c:
          type: array
          description: 'X.509 Certificate Chain. See RFC 7517 #section-4.7'
          example:
            - MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt5Sk8kt0cdTDP2Nya8B2...
            - MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt5Sk8kt0cdTDP2Nya8B2...
            - MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt5Sk8kt0cdTDP2Nya8B2...
    syncTime:
      type: object
      title: syncTime
      description: Schema representing synchronization times, including UTC offset, NTP services, and daylight saving time details.
      required:
        - utc
        - ntp
        - daylightSavingTime
      properties:
        utc:
          type: string
          description: Offset from UTC time in hours and minutes, formatted as Â±HH:mm.
          minLength: 6
          maxLength: 6
          pattern: ^[+-]([01]?[0-9]|2[0-3]):([0-5][0-9])$
          example: '-03:00'
        ntp:
          type: array
          description: List of URLs for Network Time Protocol (NTP) services.
          items:
            type: string
            description: URL of an NTP service.
          example:
            - ntp.cais.rnp.br
            - a.ntp.br
            - gps.ntp.br
        daylightSavingTime:
          type: array
          title: DaylightSavingTime
          description: Details of Daylight Saving Time period, including start and end times.
          items:
            type: object
            required:
              - start
              - end
            properties:
              start:
                type: string
                description: Start date and time of Daylight Saving Time in the format YYYY-MM-DDTHH:mm:ssZ.
                example: '2021-11-10T00:00:00Z'
              end:
                type: string
                description: End date and time of Daylight Saving Time in the format YYYY-MM-DDTHH:mm:ssZ.
                example: '2022-02-10T00:00:00Z'
